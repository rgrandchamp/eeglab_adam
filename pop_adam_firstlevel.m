function pop_adam_firstlevel()
% POP_ADAM_FIRSTLEVEL - GUI to run ADAM first-level MVPA from EEGLAB.
% It builds a cfg based on user input and current STUDY/ALLEEG selection,
% then calls adam_run_firstlevel_from_eeglab(cfg).

% ---- Default values (friendly for quick start) ----
def.model = 'BDM';
def.raw_or_tfr = 'raw';
def.nfolds = '5';
def.class_method = 'AUC';
def.crossclass = 'yes';    % temporal generalization on
def.channelpool = 'ALL_NOSELECTION';
def.resample = '55';       % as in paper example
def.erp_baseline = '-0.1 0';

% ---- Build GUI ----
geometry = { [1] [1 1] [1] [1] [1] [1] [1] [1] [1] [1] };
uilist = { ...
  { 'style' 'text' 'string' 'ADAM First-level (MVPA) â€” build classes from event codes' } ...
  { 'style' 'text' 'string' 'Class 1 (comma-separated event types):' } ...
  { 'style' 'edit' 'tag' 'class1' 'string' '' } ...
  { 'style' 'text' 'string' 'Class 2 (comma-separated event types):' } ...
  { 'style' 'edit' 'tag' 'class2' 'string' '' } ...
  { 'style' 'text' 'string' 'Model (BDM/FEM):' } ...
  { 'style' 'edit' 'tag' 'model' 'string' def.model } ...
  { 'style' 'text' 'string' 'Data (raw/tfr):' } ...
  { 'style' 'edit' 'tag' 'raw_or_tfr' 'string' def.raw_or_tfr } ...
  { 'style' 'text' 'string' 'nfolds / class_method / crossclass (yes/no):' } ...
  { 'style' 'edit' 'tag' 'nfolds' 'string' def.nfolds } ...
  { 'style' 'edit' 'tag' 'class_method' 'string' def.class_method } ...
  { 'style' 'edit' 'tag' 'crossclass' 'string' def.crossclass } ...
  { 'style' 'text' 'string' 'channelpool / resample(Hz) / ERP baseline [s s]:' } ...
  { 'style' 'edit' 'tag' 'channelpool' 'string' def.channelpool } ...
  { 'style' 'edit' 'tag' 'resample' 'string' def.resample } ...
  { 'style' 'edit' 'tag' 'erp_baseline' 'string' def.erp_baseline } ...
  { 'style' 'text' 'string' 'Output root folder (RESULTS):' } ...
  { 'style' 'edit' 'tag' 'outputdir' 'string' '' } ...
};
res = inputgui('geometry', geometry, 'uilist', uilist, 'title', 'ADAM First-level (MVPA)');
if isempty(res), return; end

% ---- Collect values ----
cfg = struct();
cfg.model         = get(findobj(gcbf,'tag','model'), 'string');
cfg.raw_or_tfr    = get(findobj(gcbf,'tag','raw_or_tfr'), 'string');
cfg.nfolds        = str2double(get(findobj(gcbf,'tag','nfolds'), 'string'));
cfg.class_method  = get(findobj(gcbf,'tag','class_method'), 'string');
cfg.crossclass    = get(findobj(gcbf,'tag','crossclass'), 'string');
cfg.channelpool   = get(findobj(gcbf,'tag','channelpool'), 'string');
cfg.resample      = str2double(get(findobj(gcbf,'tag','resample'), 'string'));
cfg.erp_baseline  = str2num(get(findobj(gcbf,'tag','erp_baseline'), 'string')); %#ok<ST2NM>
cfg.outputdir     = get(findobj(gcbf,'tag','outputdir'), 'string');
class1            = strtrim(get(findobj(gcbf,'tag','class1'), 'string'));
class2            = strtrim(get(findobj(gcbf,'tag','class2'), 'string'));

% Convert "1,2,3" into ADAM class_spec strings
cfg.class_spec = { class1, class2 };

close(gcbf);
adam_run_firstlevel_from_eeglab(cfg);
end
